# vertex config file
# tbwcjw 2025
#

# tracker
#
#   tracker_id: <string> default: "vertex"
#     A string that the client should send back on its next announcements.
#     If absent and a previous announce sent a tracker id, do not discard the old value; keep using it.
#   private: <bool> default: False
#     Whether or not clients need to pass the `passkey` argument to announce.
#   passkey: <string> default: "password"
#     Passphrase given by client if tracker is private
#   max_num_want: <int> default: 30
#     numwant is the number of peers the client would like to recieve. we limit this as to stop
#     clients overzealously hammering the tracker. Specification says a default 50 is perfect
#     but suggests that 30 is more than enough peers for any one client
#   interval: <int> default: 120
#     Interval in seconds that the client should wait between sending regular requests to the tracker
#   min_interval: <int> default: 10
#     Minimum announce interval. If present clients must not reannounce more frequently than this.
#   fullscrape: <bool> default: False
#     whether or not clients can fullscrape. fullscraping is returning information on every infohash.
#   min_scrape_interval: <int> default: 100
#     minimum scrape interval. if present clients must not scrape more frequently than this
tracker:
  tracker_id: "vertex"
  private: False
  passkey: "password"
  max_num_want: 30
  interval: 120
  min_interval: 10
  min_scrape_interval: 100
  fullscrape: True

# http
# 
# server_enable: <bool> default True
# threads: <int> default 1
# number of threads wsgi will use
# ip_bind: <string> default "127.0.0.1"
#   accepts ipv4 and ipv6 loopbacks (127.0.0.1/0.0.0.0 or :: ::1)
# ip_port: <integer> default "6969"
http:
  server_enable: True
  threads: 1
  ip_bind: "0.0.0.0"
  ip_port: 5000

# udp
#
# server_enable: <bool> default True
# ipv4_enable: <bool> default True
# ipv4_bind: <string> default "127.0.0.1"
# ipv4_port: <integer> default 5001
# ipv6_enable: <bool> default True
# ipv6_bind: <string> default "::1"
# ipv6_port: <integer> default 5002
udp:
  server_enable: True

  ipv4_enable: True
  ipv4_bind: "0.0.0.0"
  ipv4_port: 5001

  ipv6_enable: True
  ipv6_bind: "::1"
  ipv6_port: 5002

# storage
#
#   type: <string> hashmap|sqlite default: "hashmap"
#     sqlite3 database is far slower, but persistent.
#     hashmap is faster, but volatile.
#   db_name: <string> default "peers.db"
#     this is for nonvolatile sqlite db only. allows pathing.
#   cleanup_job: <bool> default: False
#     toggle cleanup job.
#   cleanup_at: <string> (HH:MM) default: "12:00"
#     time of day to run the cleanup job
#   remove_older_than: <string> (X month|week|day|hour|minute) default: "1 day"
#     this is for sqlite type, not hashmap.
#     removes peers that haven't been updated by this threshold
#   remove_older_than_secs: <int> default: 86400 (1 day)
#     this is for hashmap type, not sqlite
#     removes peers that haven't been updated by this threshold
storage:
  type: "sqlite"    
  db_name: "peers.db"     
  cleanup_job: True
  cleanup_at: "10:21"
  remove_older_than: "1 day"
  remove_older_than_secs: 86400

# stats
#
# stats are accessible via http only.
# stats_enabled: <boolean> default True
#   enables or disables the stats route
# everything_enabled: <boolean> default True
#   enables ?mode=everything, returning stats from all other modes
#     ?mode=version
#     ?mode=config
#     ?mode=conn
#     ?mode=tor
# version_enabled: <boolean> default True "?mode=version"
#   returns information about the build of vertext and packages installed in venv.
# config_enabled: <boolean> default True "?mode=config"
#   returns the config yaml as text
# torr_enabled: <boolean> default True "?mode=torr"
#   returns counts of unique infohashes, peers, seeders, leechers, event statuses
# conn_enabled: <boolean> default True "?mode=conn"
#   returns announce/scrape success fails, http request/response counts, tx/rx sizes.
#   udp connect success/fails
stats:
  stats_enabled: True
  everything_enabled: True
  version_enabled: True
  config_enabled: True
  conn_enabled: True
  torr_enabled: True

# log
#
# we extend the print function capture input and return formatted
# strings. we can also save stdout + stderr to file. runs on
# separate thread.
# write_log: <boolean> default: True
#   write stdout and stderr to log file.
# print_log: <boolean> default: True
#   print stdout and stderr to stdout.
# log_file: <string> default "vertex.log"
# log_format: <string> default "[{time}] - {level}: {module}.{function} - {message}"
#   time: time.asctime()
#   level: "INFO", "WARN", "ERROR", "DEBUG" default "INFO"
#   module: filename from which print/exception was called
#   function: function from which print/exception was called
#   message: print string or exception string
log:
  write_log: True
  print_log: True
  log_file: "vertex.log"
  log_format: '[{time}] - {level}: {module}.{function} - {message}'
  write_level: "WARN"
  print_level: "WARN"
